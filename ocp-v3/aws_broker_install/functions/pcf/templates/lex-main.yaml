AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon Lex (qs-1ob09h6a4)
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - Lex
    - Bot
    - NLU
    - chatbot
    Name: lex
    DisplayName: Amazon Lex
    LongDescription: Amazon Lex is a service for building conversational interfaces
      into any application using voice and text. Amazon Lex provides the advanced
      deep learning functionalities of automatic speech recognition (ASR) for converting
      speech to text, and natural language understanding (NLU) to recognize the intent
      of the text, to enable you to build applications with highly engaging user experiences
      and lifelike conversational interactions.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/AmazonLex_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/lex/
    ProviderDisplayName: Amazon Web Services
    Bindings:
      IAM:
        AddKeypair: true
        Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - lex:PostContent
              - lex:PostText
              Resource: '*'
      CFNOutputs: []
    ServicePlans:
      default:
        DisplayName: Standard
        Description: Amazon Lex
        LongDescription: Creates an Amazon Lex bot
        Cost: https://aws.amazon.com/lex/pricing/
        ParameterValues:
          params_hash: '{{ params_string | checksum }}'
          params_string: '{{ namespace }}::{{ _apb_plan_id }}::{{ _apb_service_class_id
            }}::{{ _apb_service_instance_id }}'
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: AWS Service Broker Configuration
      Parameters:
      - SBArtifactS3Bucket
      - SBArtifactS3KeyPrefix
    - Label:
        default: Lex Model Configuration
      Parameters:
      - LexS3Bucket
      - CustomSlotTypesKey
      - IntentsKey
      - BotKey
    ParameterLabels:
      LexS3Bucket:
        default: Lex S3 Bucket
      CustomSlotTypesKey:
        default: Custom Slot Types S3 Key
      IntentsKey:
        default: Intents S3 Key
      BotKey:
        default: Bot S3 Key
      SBArtifactS3Bucket:
        default: AWS Service Broker Artifact S3 Bucket
      SBArtifactS3KeyPrefix:
        default: AWS Service Broker Artifact S3 Key Prefix
Parameters:
  SBArtifactS3Bucket:
    Default: awsservicebroker
    Type: String
    Description: Name of the S3 bucket containing the AWS Service Broker Assets
  SBArtifactS3KeyPrefix:
    Default: ''
    Type: String
    Description: Name of the S3 key prefix containing the AWS Service Broker Assets,
      leave empty if assets are in the root of the bucket
  LexS3Bucket:
    Default: ''
    Type: String
    Description: Name of the S3 bucket containing the bot and (optionally) intent/custom
      slot type json documents
  IntentsKey:
    Default: ''
    Type: String
    Description: 'S3 key to a json document containing a list of Lex intents to create
      for example: [{"name": "intent1", ...}, {"name": "intent2", ...}] . For more
      information on the intent structure, see https://docs.aws.amazon.com/lex/latest/dg/API_PutIntent.html.
      If no intents are required leave this field empty'
  CustomSlotTypesKey:
    Default: ''
    Type: String
    Description: 'S3 key to a json document containing a list of Lex custom slot types
      to create for example: [{"name": "slot1", ...}, {"name": "slot2", ...}] . For
      more information on the slot type structure, see https://docs.aws.amazon.com/lex/latest/dg/API_PutSlotType.html.
      If no custom slot types are required leave this field empty'
  BotKey:
    Type: String
    Description: S3 key to a json document containing a Lex bot definition to create.
      For more information on the bot structure, see https://docs.aws.amazon.com/lex/latest/dg/API_PutBot.html.
Resources:
  LexIntentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-lex-intents
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lex:PutIntent
            - lex:DeleteIntent
            - s3:GetObject
            Resource:
            - '*'
  LexIntentsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates Amazon Lex Intents
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt LexIntentsRole.Arn
      Timeout: 240
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/lex_intent/lambda_function.zip
  LexCustomSlotTypesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-lex-CustomSlotTypes
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lex:PutSlotType
            - lex:DeleteSlotType
            - s3:GetObject
            Resource:
            - '*'
  LexCustomSlotTypesLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates Amazon Lex Custom Slot Types
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt LexCustomSlotTypesRole.Arn
      Timeout: 240
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/lex_custom_slot_type/lambda_function.zip
  LexBotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-lex-bot
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lex:PutBot
            - lex:DeleteBot
            - s3:GetObject
            Resource:
            - '*'
  LexBotLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates Amazon Lex Bot
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt LexBotRole.Arn
      Timeout: 240
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/lex_bot/lambda_function.zip
  IamServiceLinkedRoleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-iam-service-linked-role
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - iam:GetRole
            - iam:CreateServiceLinkedRole
            - iam:DeleteServiceLinkedRole
            Resource:
            - '*'
  IamServiceLinkedRoleLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Description: Creates IAM service linked role
      Handler: lambda_function.handler
      Runtime: python2.7
      Role: !GetAtt IamServiceLinkedRoleRole.Arn
      Timeout: 240
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/iam_service_linked_role/lambda_function.zip
  IamServiceLinkedRole:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IamServiceLinkedRoleLambda.Arn
      ServiceName: lex
  LexCustomSlotTypes:
    DependsOn: IamServiceLinkedRole
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LexCustomSlotTypesLambda.Arn
      Bucket: !Ref LexS3Bucket
      Key: !Ref CustomSlotTypesKey
  LexIntents:
    DependsOn: LexCustomSlotTypes
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LexIntentsLambda.Arn
      Bucket: !Ref LexS3Bucket
      Key: !Ref IntentsKey
  LexBot:
    DependsOn: LexIntents
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LexBotLambda.Arn
      Bucket: !Ref LexS3Bucket
      Key: !Ref BotKey
  AWSSBInjectedIAMUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: iam_user_creation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:CreateAccessKey
            - iam:PutUserPolicy
            - iam:ListAttachedUserPolicies
            - iam:DeleteUserPolicy
            - iam:AttachUserPolicy
            - iam:DeleteUser
            - iam:ListUserPolicies
            - iam:DetachUserPolicy
            - iam:CreateUser
            - iam:DeleteAccessKey
            - iam:ListAccessKeys
            - ssm:DeleteParameters
            - ssm:PutParameter
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedIAMUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedIAMUserRole
        - Arn
      Code:
        ZipFile: |-
          import cfnresponse
          import random
          import string
          import boto3
          import traceback

          alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
          iam_client = boto3.client('iam')
          ssm_client = boto3.client('ssm')


          def handler(event, context):
              response_code = cfnresponse.SUCCESS
              response_data = {}
              if event['RequestType'] == 'Create':
                  phys_id = ''.join(random.choice(alnum) for _ in range(16))
              else:
                  phys_id = event['PhysicalResourceId']
              response_data['asb-access-key-id'] = 'asb-access-key-id-%s' % phys_id
              response_data['asb-secret-access-key'] = 'asb-secret-access-key-%s' % phys_id
              try:
                  username = event['ResourceProperties']['Username']
                  if event['RequestType'] == 'Create':
                      response = iam_client.create_access_key(UserName=username)
                      aws_access_key_id = response['AccessKey']['AccessKeyId']
                      secret_access_key = response['AccessKey']['SecretAccessKey']
                      ssm_client.put_parameter(Name=response_data['asb-access-key-id'], Value=aws_access_key_id, Type='SecureString')
                      ssm_client.put_parameter(Name=response_data['asb-secret-access-key'], Value=secret_access_key, Type='SecureString')
                  elif event['RequestType'] == 'Update':
                      print('Update operation unsupported')
                      response_code = cfnresponse.FAILED
                  elif event['RequestType'] == 'Delete':
                      for access_key in iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']:
                          iam_client.delete_access_key(UserName=username, AccessKeyId=access_key['AccessKeyId'])
                      ssm_client.delete_parameters(Names=[response_data['asb-access-key-id'], response_data['asb-secret-access-key']])
                  cfnresponse.send(event, context, response_code, response_data, phys_id)
              except Exception as e:
                  print(str(e))
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, phys_id)
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedIAMUser:
    Type: AWS::IAM::User
  AWSSBInjectedIAMUserCreator:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedIAMUserLambda.Arn
      Username: !Ref AWSSBInjectedIAMUser
  AWSSBInjectedIAMUserPolicy1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSSBInjectedIAMUserPolicy1
      Users:
      - !Ref AWSSBInjectedIAMUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - lex:PostContent
          - lex:PostText
          Resource: '*'
  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: awsservicebrokeralpha
      Prefix: functions/
      Objects:
      - iam_service_linked_role/lambda_function.zip
      - lex_bot/lambda_function.zip
      - lex_custom_slot_type/lambda_function.zip
      - lex_intent/lambda_function.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::awsservicebrokeralpha/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
Outputs:
  UserKeyId:
    Value: !GetAtt AWSSBInjectedIAMUserCreator.asb-access-key-id
  UserSecretKey:
    Value: !GetAtt AWSSBInjectedIAMUserCreator.asb-secret-access-key
