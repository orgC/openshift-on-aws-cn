AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon Rekognition (qs-1ob09h6ao)
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - Rekognition
    - Image
    Name: rekognition
    DisplayName: Amazon Rekognition
    LongDescription: Amazon Rekognition makes it easy to add image and video analysis
      to your applications. You just provide an image or video to the Rekognition
      API, and the service can identify the objects, people, text, scenes, and activities,
      as well as detect any inappropriate content. Amazon Rekognition also provides
      highly accurate facial analysis and facial recognition. You can detect, analyze,
      and compare faces for a wide variety of user verification, cataloging, people
      counting, and public safety use cases.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/AmazonRekognition_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/rekognition/
    ProviderDisplayName: Amazon Web Services
    Bindings:
      IAM:
        AddKeypair: true
        Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - rekognition:DetectLabels
              - rekognition:ListCollections
              - rekognition:DetectFaces
              - rekognition:DetectModerationLabels
              - rekognition:IndexFaces
              - rekognition:RecognizeCelebrities
              - rekognition:CompareFaces
              - rekognition:DetectText
              - rekognition:GetCelebrityInfo
              - rekognition:ListFaces
              - rekognition:CreateCollection
              - rekognition:SearchFaces
              - rekognition:DeleteCollection
              - rekognition:DeleteFaces
              - rekognition:SearchFacesByImage
              Resource: '*'
      CFNOutputs: []
    ServicePlans:
      default:
        DisplayName: Image
        Description: AWS Rekognition Image
        LongDescription: Enables use of AWS Rekognition Image api's
        Cost: https://aws.amazon.com/rekognition/pricing/
        ParameterValues:
          params_hash: '{{ params_string | checksum }}'
          params_string: '{{ namespace }}::{{ _apb_plan_id }}::{{ _apb_service_class_id
            }}::{{ _apb_service_instance_id }}'
Resources:
  AWSSBInjectedIAMUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: iam_user_creation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:CreateAccessKey
            - iam:PutUserPolicy
            - iam:ListAttachedUserPolicies
            - iam:DeleteUserPolicy
            - iam:AttachUserPolicy
            - iam:DeleteUser
            - iam:ListUserPolicies
            - iam:DetachUserPolicy
            - iam:CreateUser
            - iam:DeleteAccessKey
            - iam:ListAccessKeys
            - ssm:DeleteParameters
            - ssm:PutParameter
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedIAMUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedIAMUserRole
        - Arn
      Code:
        ZipFile: |-
          import cfnresponse
          import random
          import string
          import boto3
          import traceback

          alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
          iam_client = boto3.client('iam')
          ssm_client = boto3.client('ssm')


          def handler(event, context):
              response_code = cfnresponse.SUCCESS
              response_data = {}
              if event['RequestType'] == 'Create':
                  phys_id = ''.join(random.choice(alnum) for _ in range(16))
              else:
                  phys_id = event['PhysicalResourceId']
              response_data['asb-access-key-id'] = 'asb-access-key-id-%s' % phys_id
              response_data['asb-secret-access-key'] = 'asb-secret-access-key-%s' % phys_id
              try:
                  username = event['ResourceProperties']['Username']
                  if event['RequestType'] == 'Create':
                      response = iam_client.create_access_key(UserName=username)
                      aws_access_key_id = response['AccessKey']['AccessKeyId']
                      secret_access_key = response['AccessKey']['SecretAccessKey']
                      ssm_client.put_parameter(Name=response_data['asb-access-key-id'], Value=aws_access_key_id, Type='SecureString')
                      ssm_client.put_parameter(Name=response_data['asb-secret-access-key'], Value=secret_access_key, Type='SecureString')
                  elif event['RequestType'] == 'Update':
                      print('Update operation unsupported')
                      response_code = cfnresponse.FAILED
                  elif event['RequestType'] == 'Delete':
                      for access_key in iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']:
                          iam_client.delete_access_key(UserName=username, AccessKeyId=access_key['AccessKeyId'])
                      ssm_client.delete_parameters(Names=[response_data['asb-access-key-id'], response_data['asb-secret-access-key']])
                  cfnresponse.send(event, context, response_code, response_data, phys_id)
              except Exception as e:
                  print(str(e))
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, phys_id)
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedIAMUser:
    Type: AWS::IAM::User
  AWSSBInjectedIAMUserCreator:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedIAMUserLambda.Arn
      Username: !Ref AWSSBInjectedIAMUser
  AWSSBInjectedIAMUserPolicy1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSSBInjectedIAMUserPolicy1
      Users:
      - !Ref AWSSBInjectedIAMUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - rekognition:DetectLabels
          - rekognition:ListCollections
          - rekognition:DetectFaces
          - rekognition:DetectModerationLabels
          - rekognition:IndexFaces
          - rekognition:RecognizeCelebrities
          - rekognition:CompareFaces
          - rekognition:DetectText
          - rekognition:GetCelebrityInfo
          - rekognition:ListFaces
          - rekognition:CreateCollection
          - rekognition:SearchFaces
          - rekognition:DeleteCollection
          - rekognition:DeleteFaces
          - rekognition:SearchFacesByImage
          Resource: '*'
Outputs:
  UserKeyId:
    Value: !GetAtt AWSSBInjectedIAMUserCreator.asb-access-key-id
  UserSecretKey:
    Value: !GetAtt AWSSBInjectedIAMUserCreator.asb-secret-access-key
