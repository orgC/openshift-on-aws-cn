AWSTemplateFormatVersion: 2010-09-09
Description: AWS Service Broker - Amazon Athena. (qs-1nt0fs922)
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
    - AWS
    - athena
    - serverless
    - SQL
    - S3
    - database
    Name: athena
    DisplayName: Amazon Athena
    LongDescription: Amazon Athena is an interactive query service that makes it easy
      to analyze data in Amazon S3 using standard SQL. Athena is serverless, so there
      is no infrastructure to manage, and you pay only for the queries that you run.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/AmazonAthena_LARGE.png
    DocumentationUrl: https://aws.amazon.com/documentation/athena/
    ProviderDisplayName: Amazon Web Services
    Bindings:
      IAM:
        AddKeypair: true
        Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Action:
              - athena:*
              Effect: Allow
              Resource: '*'
            - Action:
              - glue:*
              Effect: Allow
              Resource: '*'
            - Action:
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:ListMultipartUploadParts
              - s3:AbortMultipartUpload
              - s3:PutObject
              Effect: Allow
              Resource: '*'
      CFNOutputs:
      - OutputLocation
    ServicePlans:
      default:
        DisplayName: Athena Table
        Description: Athena Table
        LongDescription: Athena table using an existing S3 source
        Cost: https://aws.amazon.com/athena/pricing/
        ParameterValues:
          params_hash: '{{ params_string | checksum }}'
          params_string: '{{ namespace }}::{{ _apb_plan_id }}::{{ _apb_service_class_id
            }}::{{ _apb_service_instance_id }}'
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Athena Settings
      Parameters:
      - AthenaDBName
      - TableName
      - S3Source
      - TableColumns
      - RowFormat
      - SerdeName
      - SerdeProperties
    ParameterLabels:
      S3Source:
        default: S3 Source
      TableColumns:
        default: Table Columns
      RowFormat:
        default: Row Format
      SerdeName:
        default: SERDE Name
      SerdeProperties:
        default: SERDE Properties
      WriteCapacityUnits:
        default: Write Capacity Units
      AthenaDBName:
        default: DB Name
      TableName:
        default: Table Name
Parameters:
  S3Source:
    Type: String
    Description: The S3 location for the source data.
  TableColumns:
    Type: String
    Description: 'The columns and their types in the format: (col_name data_type [COMMENT
      col_comment] [, ...] )'
  RowFormat:
    Type: String
    AllowedValues:
    - DELIMITED
    - SERDE
    Description: The row format of the source data.
  SerdeName:
    Type: String
    Default: ''
    Description: SERDE Name, only applicable if "Row Format" is set to SERDE.
  SerdeProperties:
    Type: String
    Description: SERDE Properties in the format ("property_name" = "property_value",
      "property_name" = "property_value" [, ...] ). Only applicable if "Row Format"
      is set to SERDE.
    Default: ''
  AthenaDBName:
    Type: String
    Description: Athena Database name, will be created if it does not exist
  TableName:
    Type: String
    Description: Athena table name
Resources:
  OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  CreateTable:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateTableFunction.Arn
      AthenaDBName: !Ref AthenaDBName
      TableName: !Ref TableName
      Columns: !Ref TableColumns
      SourceUri: !Ref S3Source
      SerdeName: !Ref SerdeName
      SerdeProperties: !Ref SerdeProperties
      RowFormat: !Ref RowFormat
      OutputLocation: !Sub s3://${OutputBucket}/
  CreateTableFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import boto3
          import traceback
          from os import environ
          from time import sleep
          region = environ['AWS_REGION']
          athena_client = boto3.client('athena', region_name=region)
          query_template = """
          CREATE EXTERNAL TABLE
            {db_name}.{table_name} {columns}
            ROW FORMAT {row_format}
            LOCATION '{location}';
          """
          serde_template = """SERDE {} WITH SERDEPROPERTIES {}"""
          def query_status(qid):
              response = athena_client.get_query_execution(QueryExecutionId=qid)
              return response['QueryExecution']['Status']['State']
          def lambda_handler(event, context):
              print(json.dumps(event))
              status = cfnresponse.FAILED
              response_data = {}
              physical_id = ''
              try:
                  query_dict = {
                      'db_name': event['ResourceProperties']['AthenaDBName'],
                      'table_name': event['ResourceProperties']['TableName'],
                      'columns': event['ResourceProperties']['Columns'],
                      'row_format': event['ResourceProperties']['RowFormat'],
                      'location': event['ResourceProperties']['SourceUri']
                  }
                  if query_dict['row_format'] == 'SERDE':
                      query_dict['row_format'] = serde_template.format(
                             event['ResourceProperties']['SerdeName'],
                             event['ResourceProperties']['SerdeProperties']
                      )
                  physical_id = "{}.{}".format(
                      query_dict['db_name'],
                      query_dict['table_name']
                  )
                  if event['RequestType'] == 'Create':
                      query = "CREATE DATABASE IF NOT EXISTS {};".format(query_dict['db_name'])
                      query_id = athena_client.start_query_execution(
                          QueryString=query,
                          ResultConfiguration={
                              'OutputLocation': event['ResourceProperties']['OutputLocation']
                          }
                      )['QueryExecutionId']
                      print("CREATE DATABASE Query ID: {}".format(query_id))
                      while query_status(query_id) in ['QUEUED', 'RUNNING'] and context.get_remaining_time_in_millis() > 10000:
                          sleep(5)
                      query = query_template.format(**query_dict)
                      query_id = athena_client.start_query_execution(
                          QueryString=query,
                          ResultConfiguration={
                              'OutputLocation': event['ResourceProperties']['OutputLocation']
                          }
                      )['QueryExecutionId']
                      print("CREATE TABLE Query ID: {}".format(query_id))
                      while query_status(query_id) in ['QUEUED', 'RUNNING'] and context.get_remaining_time_in_millis() > 10000:
                          sleep(5)
                  elif event['RequestType'] == 'Delete':
                      query = "DROP TABLE {}.{};".format(query_dict['db_name'], query_dict['table_name'])
                      query_id = athena_client.start_query_execution(
                          QueryString=query,
                          ResultConfiguration={
                              'OutputLocation': event['ResourceProperties']['OutputLocation']
                          }
                      )['QueryExecutionId']
                      while query_status(query_id) in ['QUEUED', 'RUNNING'] and context.get_remaining_time_in_millis() > 10000:
                          sleep(5)
                  status = cfnresponse.SUCCESS
              except Exception as e:
                  print(str(e))
                  traceback.print_exc()
              finally:
                  cfnresponse.send(event, context, status, response_data, physical_id)
      Handler: index.lambda_handler
      Role: !GetAtt CreateTableRole.Arn
      Runtime: python2.7
      Timeout: 300
  CreateTableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CreateTablePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:*
            Resource: '*'
          - Effect: Allow
            Action: athena:*
            Resource: '*'
          - Effect: Allow
            Action: glue:*
            Resource: '*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  AWSSBInjectedIAMUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: iam_user_creation
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:CreateAccessKey
            - iam:PutUserPolicy
            - iam:ListAttachedUserPolicies
            - iam:DeleteUserPolicy
            - iam:AttachUserPolicy
            - iam:DeleteUser
            - iam:ListUserPolicies
            - iam:DetachUserPolicy
            - iam:CreateUser
            - iam:DeleteAccessKey
            - iam:ListAccessKeys
            - ssm:DeleteParameters
            - ssm:PutParameter
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedIAMUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedIAMUserRole
        - Arn
      Code:
        ZipFile: |-
          import cfnresponse
          import random
          import string
          import boto3
          import traceback

          alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
          iam_client = boto3.client('iam')
          ssm_client = boto3.client('ssm')


          def handler(event, context):
              response_code = cfnresponse.SUCCESS
              response_data = {}
              if event['RequestType'] == 'Create':
                  phys_id = ''.join(random.choice(alnum) for _ in range(16))
              else:
                  phys_id = event['PhysicalResourceId']
              response_data['asb-access-key-id'] = 'asb-access-key-id-%s' % phys_id
              response_data['asb-secret-access-key'] = 'asb-secret-access-key-%s' % phys_id
              try:
                  username = event['ResourceProperties']['Username']
                  if event['RequestType'] == 'Create':
                      response = iam_client.create_access_key(UserName=username)
                      aws_access_key_id = response['AccessKey']['AccessKeyId']
                      secret_access_key = response['AccessKey']['SecretAccessKey']
                      ssm_client.put_parameter(Name=response_data['asb-access-key-id'], Value=aws_access_key_id, Type='SecureString')
                      ssm_client.put_parameter(Name=response_data['asb-secret-access-key'], Value=secret_access_key, Type='SecureString')
                  elif event['RequestType'] == 'Update':
                      print('Update operation unsupported')
                      response_code = cfnresponse.FAILED
                  elif event['RequestType'] == 'Delete':
                      for access_key in iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']:
                          iam_client.delete_access_key(UserName=username, AccessKeyId=access_key['AccessKeyId'])
                      ssm_client.delete_parameters(Names=[response_data['asb-access-key-id'], response_data['asb-secret-access-key']])
                  cfnresponse.send(event, context, response_code, response_data, phys_id)
              except Exception as e:
                  print(str(e))
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, phys_id)
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedIAMUser:
    Type: AWS::IAM::User
  AWSSBInjectedIAMUserCreator:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedIAMUserLambda.Arn
      Username: !Ref AWSSBInjectedIAMUser
  AWSSBInjectedIAMUserPolicy1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AWSSBInjectedIAMUserPolicy1
      Users:
      - !Ref AWSSBInjectedIAMUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - athena:*
          Effect: Allow
          Resource: '*'
        - Action:
          - glue:*
          Effect: Allow
          Resource: '*'
        - Action:
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:ListMultipartUploadParts
          - s3:AbortMultipartUpload
          - s3:PutObject
          Effect: Allow
          Resource: '*'
Outputs:
  OutputLocation:
    Value: !Sub s3://${OutputBucket}/
  UserKeyId:
    Value: !GetAtt AWSSBInjectedIAMUserCreator.asb-access-key-id
  UserSecretKey:
    Value: !GetAtt AWSSBInjectedIAMUserCreator.asb-secret-access-key
